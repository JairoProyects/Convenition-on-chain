package com.zkbytebandits.convenio.service.auditLog.create;

import com.zkbytebandits.convenio.entity.AuditLog;
import com.zkbytebandits.convenio.entity.User;
import com.zkbytebandits.convenio.repository.auditLog.AuditLogRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

@Service
public class CreateAuditLogService {

    private final AuditLogRepository auditLogRepository;

    @Autowired
    public CreateAuditLogService(AuditLogRepository auditLogRepository) {
        this.auditLogRepository = auditLogRepository;
    }

    /**
     * Records an audit log entry. This method can be called asynchronously.
     * It runs in a new transaction to ensure audit logging doesn't fail the main transaction.
     */
    @Async // Make logging asynchronous so it doesn't slow down the main operation
    @Transactional(propagation = Propagation.REQUIRES_NEW) // Ensure audit log is saved even if parent transaction rolls back
    public void recordEvent(User user, String action, String resourceType, String resourceId, String details) {
        AuditLog logEntry = AuditLog.builder()
                .user(user)
                .action(action)
                .resourceType(resourceType)
                .resourceId(resourceId)
                .details(details)
                // Timestamp is auto-generated by @CreationTimestamp
                .build();
        auditLogRepository.save(logEntry);
    }

    // Convenience method for recording events without details
    @Async
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void recordEvent(User user, String action, String resourceType, String resourceId) {
        recordEvent(user, action, resourceType, resourceId, null);
    }
} 