package com.convenionchain.backend.service;

import com.convenionchain.backend.domain.entity.AuditLog;
import com.convenionchain.backend.domain.repository.AuditLogRepository;
import com.zkbytebandits.convenio.entity.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;

@Service
public class AuditLogService {

    private final AuditLogRepository auditLogRepository;

    @Autowired
    public AuditLogService(AuditLogRepository auditLogRepository) {
        this.auditLogRepository = auditLogRepository;
    }

    /**
     * Records an audit log entry. This method can be called asynchronously.
     * It runs in a new transaction to ensure audit logging doesn't fail the main transaction.
     */
    @Async // Make logging asynchronous so it doesn't slow down the main operation
    @Transactional(propagation = Propagation.REQUIRES_NEW) // Ensure audit log is saved even if parent transaction rolls back
    public void recordEvent(User user, String action, String resourceType, String resourceId, String details) {
        // Search user by email or ID if needed
        // User userEntity = userRepository.findByEmail(user).orElse(null); // Example if you have a user repository
        AuditLog logEntry = AuditLog.builder()
                .user(user)
                .action(action)
                .resourceType(resourceType)
                .resourceId(resourceId)
                .details(details)
                // Timestamp is auto-generated by @CreationTimestamp
                .build();
        auditLogRepository.save(logEntry);
    }

    // Convenience method for recording events without details
    @Async
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void recordEvent(User user, String action, String resourceType, String resourceId) {
        recordEvent(user, action, resourceType, resourceId, null);
    }

    // Methods to retrieve audit logs (could be expanded based on needs)
    @Transactional(readOnly = true)
    public Page<AuditLog> findByActor(String actor, Pageable pageable) {
        return auditLogRepository.findByActor(actor, pageable);
    }

    @Transactional(readOnly = true)
    public Page<AuditLog> findByAction(String action, Pageable pageable) {
        return auditLogRepository.findByAction(action, pageable);
    }

    @Transactional(readOnly = true)
    public Page<AuditLog> findByResourceTypeAndResourceId(String resourceType, String resourceId, Pageable pageable) {
        return auditLogRepository.findByResourceTypeAndResourceId(resourceType, resourceId, pageable);
    }

    @Transactional(readOnly = true)
    public Page<AuditLog> findByTimestampBetween(LocalDateTime startTime, LocalDateTime endTime, Pageable pageable) {
        return auditLogRepository.findByTimestampBetween(startTime, endTime, pageable);
    }
} 